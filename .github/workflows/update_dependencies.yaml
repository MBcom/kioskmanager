name: Update Dependencies

on:
  schedule:
    - cron: '0 0 * * 0'  # Run weekly on Sunday
  workflow_dispatch:  # Allow manual triggers

jobs:
  update-dependencies:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install pip-tools
        run: |
          python -m pip install --upgrade pip
          pip install pip-tools

      - name: Check for updates
        id: check_updates
        run: |
          cd src
                # Create requirements.in from requirements.txt
                cp requirements.txt requirements.in
                # Generate new requirements.txt
                pip-compile --upgrade requirements.in -o requirements.new
                
                if ! cmp -s requirements.txt requirements.new; then
                echo "updates_available=true" >> $GITHUB_OUTPUT
                # Get new Django version
                NEW_VERSION=$(grep "^Django==" requirements.new | cut -d'=' -f3)
                echo "django_version=$NEW_VERSION" >> $GITHUB_OUTPUT
                
                # Replace old requirements.txt with the new one
                mv requirements.new requirements.txt
                
                # Commit the updated requirements.txt
                git config user.name "$GITHUB_ACTOR"
                git config user.email "$GITHUB_ACTOR@users.noreply.github.com"
                git add requirements.txt
                git commit -m "chore: update requirements.txt with latest dependencies"
                else
                echo "updates_available=false" >> $GITHUB_OUTPUT
                fi
      - name: Check for Docker base image updates
        run: |
                  cd src
                  BASE_IMAGE=$(grep "^FROM" Dockerfile | awk '{print $2}')
                  LATEST_IMAGE=$(docker run --rm skandyla/docker-registry-latest $BASE_IMAGE)
                    
                  if [ "$BASE_IMAGE" != "$LATEST_IMAGE" ]; then
                  echo "Docker base image update available: $LATEST_IMAGE"
                  sed -i "s|$BASE_IMAGE|$LATEST_IMAGE|" Dockerfile
                  
                  # Commit the updated Dockerfile
                  git config user.name "$GITHUB_ACTOR"
                  git config user.email "$GITHUB_ACTOR@users.noreply.github.com"
                  git add Dockerfile
                  git commit -m "chore: update Docker base image to $LATEST_IMAGE"
                    else
                  echo "Docker base image is up-to-date."
                    fi

      - name: Create new version tag
        if: steps.check_updates.outputs.updates_available == 'true'
        run: |
          # Increment patch version
                  CURRENT_VERSION=$(git describe --tags --abbrev=0 2>/dev/null || echo "v1.0.0")
                  MAJOR=$(echo $CURRENT_VERSION | cut -d. -f1)
                  MINOR=$(echo $CURRENT_VERSION | cut -d. -f2)
                  PATCH=$(echo $CURRENT_VERSION | cut -d. -f3)
                  NEW_PATCH=$((PATCH + 1))
                  NEW_VERSION="${MAJOR}.${MINOR}.${NEW_PATCH}"
                  
                  # Update Chart.yaml
                  sed -i "s/appVersion: \".*\"/appVersion: \"v${NEW_VERSION}\"/" chart/Chart.yaml
                  
                  # Commit changes
                  git config user.name "$GITHUB_ACTOR"
                  git config user.email "$GITHUB_ACTOR@users.noreply.github.com"
                  git add chart/Chart.yaml
                  git commit -m "chore: bump version to v${NEW_VERSION}"
                  git tag -a "v${NEW_VERSION}" -m "Release v${NEW_VERSION}"
                  git push origin "v${NEW_VERSION}"
                  git push
                  
                  # Create a new release
                  curl -X POST \
                    -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                    -H "Content-Type: application/json" \
                    -d '{
                      "tag_name": "v'${NEW_VERSION}'",
                      "target_commitish": "main",
                      "name": "v'${NEW_VERSION}'",
                      "body": "Release v'${NEW_VERSION}'",
                      "draft": false,
                      "prerelease": false
                    }' \
                    https://api.github.com/repos/${{ github.repository }}/releases