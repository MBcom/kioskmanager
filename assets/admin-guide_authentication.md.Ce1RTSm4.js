import{_ as o,c as i,o as t,ag as n}from"./chunks/framework.DI3H4yZc.js";const p=JSON.parse('{"title":"Authentication Configuration","description":"","frontmatter":{},"headers":[],"relativePath":"admin-guide/authentication.md","filePath":"admin-guide/authentication.md"}'),a={name:"admin-guide/authentication.md"};function d(s,e,r,c,l,u){return t(),i("div",null,e[0]||(e[0]=[n('<h1 id="authentication-configuration" tabindex="-1">Authentication Configuration <a class="header-anchor" href="#authentication-configuration" aria-label="Permalink to &quot;Authentication Configuration&quot;">​</a></h1><p>Kioskmanager supports both standard Django username/password authentication and OpenID Connect (OIDC) for accessing the admin portal. The method is configured during Helm deployment.</p><h2 id="accessing-the-admin-panel" tabindex="-1">Accessing the Admin Panel <a class="header-anchor" href="#accessing-the-admin-panel" aria-label="Permalink to &quot;Accessing the Admin Panel&quot;">​</a></h2><p>Regardless of the method, the admin panel is typically accessed via <code>http://&lt;your-kioskmanager-address&gt;/admin/</code>.</p><h2 id="_1-standard-django-authentication" tabindex="-1">1. Standard Django Authentication <a class="header-anchor" href="#_1-standard-django-authentication" aria-label="Permalink to &quot;1. Standard Django Authentication&quot;">​</a></h2><p>This is the default method.</p><ul><li>Users are managed directly within Django (see <a href="./user-management.html">User Management</a>).</li><li>Login uses a username and password.</li><li>The initial superuser is created based on <code>adminUser</code> and <code>adminPassword</code> Helm values (or corresponding environment variables <code>ADMIN_USERNAME</code>, <code>ADMIN_PASSWORD</code>).</li></ul><p><strong>Helm Configuration:</strong> Set <code>auth.method: &quot;standard&quot;</code> in your Helm values (this is the default).</p><h2 id="_2-openid-connect-oidc-authentication" tabindex="-1">2. OpenID Connect (OIDC) Authentication <a class="header-anchor" href="#_2-openid-connect-oidc-authentication" aria-label="Permalink to &quot;2. OpenID Connect (OIDC) Authentication&quot;">​</a></h2><p>OIDC allows users to log in using an external Identity Provider (IdP) like Keycloak, Okta, Auth0, Azure AD, etc.</p><p><strong>Login Flow:</strong></p><ol><li>User navigates to the admin login page.</li><li>If OIDC is enabled, a button like &quot;Login with -OIDC Provider Name-&quot; will be visible.</li><li>Clicking this button redirects the user to your IdP&#39;s login page.</li><li>User authenticates with the IdP.</li><li>IdP redirects the user back to Kioskmanager.</li><li>Kioskmanager validates the OIDC token, and either logs in an existing user or creates/updates a user based on the OIDC claims.</li><li>Standard Django login fields will also be present on the login page, allowing local admin accounts to log in even if OIDC is the primary method for most users.</li></ol><p><strong>Helm Configuration (<code>auth.method: &quot;oidc&quot;</code>):</strong> To enable OIDC, set <code>auth.method: &quot;oidc&quot;</code> in your Helm values and configure the <code>oidc</code> section:</p><ul><li><p><strong>Provider Discovery (Recommended):</strong></p><ul><li><code>oidc.opBaseDiscoveryUrl</code>: The URL to your IdP&#39;s <code>.well-known/openid-configuration</code> endpoint (e.g., <code>https://idp.example.com/auth/realms/myrealm</code>). This allows Kioskmanager to auto-discover other endpoints.</li></ul></li><li><p><strong>Explicit Endpoints (if discovery is not used/sufficient):</strong></p><ul><li><code>oidc.opAuthorizationEndpoint</code>: URL for authorization.</li><li><code>oidc.opTokenEndpoint</code>: URL for token exchange.</li><li><code>oidc.opUserEndpoint</code>: URL for fetching user information.</li><li><code>oidc.opJwksEndpoint</code>: URL for JWKS (JSON Web Key Set) to verify token signatures.</li><li><code>oidc.opIssuerEndpoint</code>: (Optional but often useful) The IdP&#39;s issuer identifier.</li></ul></li><li><p><strong>Client Configuration (Relying Party - Kioskmanager):</strong></p><ul><li><code>oidc.rpClientId</code>: <strong>Required.</strong> The Client ID obtained when registering Kioskmanager as an OIDC client with your IdP.</li><li><code>oidc.rpClientSecret</code>: <strong>Required.</strong> The Client Secret for Kioskmanager. <strong>This is sensitive and must be set securely</strong> (e.g., via <code>--set oidc.rpClientSecret=YOURSECRET</code> during Helm install, not directly in <code>values.yaml</code> if committed to git).</li><li><code>oidc.rpSignAlgo</code>: Algorithm your IdP uses to sign ID tokens (e.g., <code>RS256</code>).</li><li><code>oidc.rpScopes</code>: Scopes Kioskmanager requests (e.g., <code>openid email profile groups</code>). Ensure your &quot;groups&quot; or roles scope is included if you want to map groups.</li><li><code>oidc.providerName</code>: Text displayed on the OIDC login button (e.g., &quot;Login with Company SSO&quot;).</li></ul></li><li><p><strong>User Provisioning &amp; Attribute Mapping:</strong></p><ul><li><code>oidc.createUser</code>: (<code>true</code>/<code>false</code>) Whether to automatically create Django users if they don&#39;t exist after successful OIDC login.</li><li><code>oidc.updateUserAttributes</code>: (<code>true</code>/<code>false</code>) Whether to update user&#39;s first name, last name, and email from OIDC claims on each login.</li><li><code>oidc.usernameClaim</code>: OIDC claim used for the Django username (e.g., <code>email</code>, <code>preferred_username</code>, <code>sub</code>). <strong>This claim&#39;s value MUST be unique across all users from your IdP.</strong> Using <code>email</code> is common.</li><li><code>oidc.claimFirstName</code>, <code>oidc.claimLastName</code>, <code>oidc.claimEmail</code>: Names of the OIDC claims to map to Django User&#39;s <code>first_name</code>, <code>last_name</code>, and <code>email</code> fields.</li></ul></li><li><p><strong>Group Mapping:</strong> Allows Kioskmanager to automatically assign users to Django groups based on a claim from the OIDC token.</p><ul><li><code>oidc.groupsClaimName</code>: The name of the claim in the OIDC token that contains a list of group/role names (e.g., <code>groups</code>, <code>roles</code>). If empty, OIDC group sync is disabled.</li><li><code>oidc.rpDjangoGroupsSyncEnabled</code>: Set to <code>true</code> to enable the sync of groups into Kioskmanager. The <code>groups</code> claim should contain a list of group names a user belongs to.</li><li><code>oidc.assignContentManager</code>: If <code>true</code>, all users will be added to predefined <code>Content Managers</code> group.</li></ul></li><li><p><strong>Redirect URLs:</strong></p><ul><li><code>oidc.loginRedirectUrl</code>: Where to redirect after a successful OIDC login (default <code>/admin/</code>).</li><li><code>oidc.logoutRedirectUrl</code>: Where to redirect after an OIDC-initiated logout (default <code>/</code>).</li></ul></li></ul><p><strong>Important Notes for OIDC Setup:</strong></p><ul><li><strong>Redirect URIs in IdP:</strong> When registering Kioskmanager as an OIDC client in your IdP, you must provide a Redirect URI. This will typically be <code>http(s)://&lt;your-kioskmanager-ingress-host&gt;/oidc/callback/</code>.</li><li><strong>Django Groups:</strong> For group mapping to be effective, ensure the group names provided by your OIDC provider in the specified claim match the names of Groups you have configured in Django (e.g., &quot;Content Managers&quot;). You can let Kioskmanager create them if <code>oidc.rpDjangoGroupsSyncEnabled</code> is true, but then you&#39;ll need to assign permissions to these newly created Django groups.</li><li><strong>Debugging:</strong> <code>mozilla-django-oidc</code> provides logging. Increase Django&#39;s log level for <code>mozilla_django_oidc</code> to DEBUG in your <code>settings.py</code> if you encounter issues.</li></ul><p>Refer to the Helm chart&#39;s <code>values.yaml</code> for the exact parameter names and default values.</p>',17)]))}const m=o(a,[["render",d]]);export{p as __pageData,m as default};
